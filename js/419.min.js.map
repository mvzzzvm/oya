{"version":3,"file":"419.min.js","mappings":"oJAAO,MAAMA,EACVC,YAAYC,GACTC,KAAKC,MAAQC,SAASC,cAAcJ,GACpCC,KAAKI,MAAQ,CAAC,aAAc,aAC5BJ,KAAKK,YAAc,CAAC,EAEpBL,KAAKC,MAAMK,iBAAiB,cAAcC,SAASC,IAChD,MAAMC,EAASD,EAAOE,aAAa,WACnC,IAAKD,EACF,MAAM,IAAIE,MAAM,oCAEnB,GAAIC,MAAMH,GACP,MAAM,IAAIE,MAAM,wCAAwCF,YAEtDT,KAAKK,YAAYI,KAAST,KAAKK,YAAYI,GAAU,IAC1DT,KAAKK,YAAYI,GAAQI,KAAK,CAC3BC,IAAKN,EAAOE,aAAa,YACzBK,KAAMP,EAAOE,aAAa,SAC5B,IAEJV,KAAKC,MAAMe,UAAY,GAEvBhB,KAAKiB,eACLjB,KAAKkB,iBACR,CAEAA,kBACGC,OAAOC,iBAAiB,SAAUpB,KAAKiB,aAAaI,KAAKrB,MAC5D,CAEAiB,eACG,MAAMK,EAAcH,OAAOI,WACrBC,EAAWxB,KAAKC,MAAMS,aAAa,mBAAqB,KAExDe,EAAqBC,OAAOC,KAAK3B,KAAKK,aACxCuB,QAAQC,IAAOjB,MAAMiB,KACrBC,IAAIC,QACR,IAAIC,EAAsBP,EAAmBG,QAAQK,GAAQA,GAAOX,IAGhEY,EAC8B,IAA/BF,EAAoBG,OACfC,KAAKC,OAAOZ,GACZW,KAAKE,OAAON,GAGpB,IAAIR,GAAYA,GAAYU,EAA5B,CAEAlC,KAAKC,MAAMsC,aAAa,iBAAkBL,GAC1ClC,KAAKC,MAAMe,UAAY,GAEvBhB,KAAKwC,sBAAsBxC,KAAKK,YAAY6B,IAC5C,IAAK,MAAMO,KAAczC,KAAKK,YAAY6B,GAAmB,CAC1D,MAAM1B,EAASN,SAASwC,cAAc,UACtClC,EAAOM,IAAM2B,EAAW3B,IACxBN,EAAOO,KAAO0B,EAAW1B,KACzBf,KAAKC,MAAM0C,OAAOnC,EACrB,CAX8C,CAajD,CACAgC,sBAAsBC,GAEnBA,EAAWG,MAAK,CAACC,EAAGC,IACb9C,KAAKI,MAAM2C,SAASF,EAAE9B,OAASf,KAAKI,MAAM2C,SAASD,EAAE/B,MAC/Cf,KAAKI,MAAM4C,QAAQH,EAAE9B,MAAQf,KAAKI,MAAM4C,QAAQF,EAAE/B,MACjDf,KAAKI,MAAM2C,SAASF,EAAE9B,QAAUf,KAAKI,MAAM2C,SAASD,EAAE/B,OACtD,EAED,GAGhB,EAEI,SAASd,EAAMgD,EAAeC,GAClC,MAAMjD,EAAQC,SAASC,cAAc8C,GACrC,IAAKhD,EAAO,OAEZ,MAAMkD,EAAajD,SAASC,cAAc,kBACpCiD,EAASlD,SAASC,cAAc,kBAEtCF,EAAMmB,iBAAiB,QAAQ,KAE5B+B,EAAWE,MAAMC,QAAU,OAC3BF,EAAOC,MAAMC,QAAU,UAG1BrD,EAAMmB,iBAAiB,SAAS,KAExBnB,EAAMsD,UACRJ,EAAWE,MAAMC,QAAU,QAE9B,IAEHH,EAAW/B,iBAAiB,SAG5B,SAAmBoC,GAEZA,EAAEC,OAAOC,QAAQ,oBAElBzD,EAAM0D,OAAS1D,EAAM2D,OAAS3D,EAAM4D,QAE1C,GACH,C","sources":["webpack://webdev/./src/js/modules/video.js"],"sourcesContent":["export class VideoSourceSelector {\r\n   constructor(selector) {\r\n      this.video = document.querySelector(selector)\r\n      this.order = [\"video/webm\", \"video/mp4\"] // breakpoint sort order\r\n      this.breakpoints = {}\r\n\r\n      this.video.querySelectorAll(\"[data-src]\").forEach((source) => {\r\n         const dataMw = source.getAttribute(\"data-mw\")\r\n         if (!dataMw) {\r\n            throw new Error(`unable to find data-mw attribute`)\r\n         }\r\n         if (isNaN(dataMw)) {\r\n            throw new Error(`data-mw is expected to be a number, '${dataMw}' found`)\r\n         }\r\n         if (!this.breakpoints[dataMw]) this.breakpoints[dataMw] = []\r\n         this.breakpoints[dataMw].push({\r\n            src: source.getAttribute(\"data-src\"),\r\n            type: source.getAttribute(\"type\"),\r\n         })\r\n      })\r\n      this.video.innerHTML = \"\" // we clean up so that there is nothing superfluous\r\n\r\n      this.chooseSource()\r\n      this.listenToResizes()\r\n   }\r\n\r\n   listenToResizes() {\r\n      window.addEventListener(\"resize\", this.chooseSource.bind(this))\r\n   }\r\n\r\n   chooseSource() {\r\n      const windowWidth = window.innerWidth // document.body.clientWidth\r\n      const widthNow = this.video.getAttribute(\"data-width-now\") || null\r\n      //   console.log(\"breakpoints\", this.breakpoints)\r\n      const numericBreakpoints = Object.keys(this.breakpoints)\r\n         .filter((s) => !isNaN(s))\r\n         .map(Number)\r\n      let filteredBreakpoints = numericBreakpoints.filter((key) => key >= windowWidth)\r\n\r\n      //   console.log(\"filtered\", filteredBreakpoints)\r\n      let targetBreakpoint =\r\n         filteredBreakpoints.length === 0\r\n            ? Math.max(...numericBreakpoints)\r\n            : Math.min(...filteredBreakpoints)\r\n      //   console.log(targetBreakpoint)\r\n\r\n      if (widthNow && widthNow == targetBreakpoint) return\r\n\r\n      this.video.setAttribute(\"data-width-now\", targetBreakpoint)\r\n      this.video.innerHTML = \"\"\r\n      //   console.log(this.breakpoints[targetBreakpoint])\r\n      this.sortBreakpointsByType(this.breakpoints[targetBreakpoint])\r\n      for (const breakpoint of this.breakpoints[targetBreakpoint]) {\r\n         const source = document.createElement(\"source\")\r\n         source.src = breakpoint.src\r\n         source.type = breakpoint.type\r\n         this.video.append(source)\r\n      }\r\n      //   video.load()\r\n   }\r\n   sortBreakpointsByType(breakpoint) {\r\n      // types that are not included in the order array will go to the bottom\r\n      breakpoint.sort((a, b) => {\r\n         if (this.order.includes(a.type) && this.order.includes(b.type)) {\r\n            return this.order.indexOf(a.type) - this.order.indexOf(b.type)\r\n         } else if (this.order.includes(a.type) && !this.order.includes(b.type)) {\r\n            return -1\r\n         } else {\r\n            return 1\r\n         }\r\n      })\r\n   }\r\n}\r\nexport function video(videoSelector, options) {\r\n   const video = document.querySelector(videoSelector)\r\n   if (!video) return\r\n\r\n   const playButton = document.querySelector(\".video__button\")\r\n   const poster = document.querySelector(\".video__poster\")\r\n\r\n   video.addEventListener(\"play\", () => {\r\n      // console.log('play event fired')\r\n      playButton.style.display = \"none\"\r\n      poster.style.display = \"none\"\r\n      // document.body.setAttribute(\"data-video-playing\", true)\r\n   })\r\n   video.addEventListener(\"pause\", () => {\r\n      // console.log('pause event fired')\r\n      if (!video.seeking) {\r\n         playButton.style.display = \"block\"\r\n         // document.body.removeAttribute(\"data-video-playing\")\r\n      }\r\n   })\r\n   playButton.addEventListener(\"click\", playPause)\r\n   // video.addEventListener(\"touchstart\", playPause, { passive: true })\r\n\r\n   function playPause(e) {\r\n      // console.log('e.target', e.target)\r\n      if (e.target.closest(\".video__button\")) {\r\n         // console.log('video.paused?', video.paused)\r\n         video.paused ? video.play() : video.pause()\r\n      }\r\n   }\r\n}\r\n"],"names":["VideoSourceSelector","constructor","selector","this","video","document","querySelector","order","breakpoints","querySelectorAll","forEach","source","dataMw","getAttribute","Error","isNaN","push","src","type","innerHTML","chooseSource","listenToResizes","window","addEventListener","bind","windowWidth","innerWidth","widthNow","numericBreakpoints","Object","keys","filter","s","map","Number","filteredBreakpoints","key","targetBreakpoint","length","Math","max","min","setAttribute","sortBreakpointsByType","breakpoint","createElement","append","sort","a","b","includes","indexOf","videoSelector","options","playButton","poster","style","display","seeking","e","target","closest","paused","play","pause"],"sourceRoot":""}